#include <iostream>
#include <vector>
#include <list>
#include <string>

using namespace std;

class HashTable {
private:
    int size;
    string method;
    vector<list<int>> chainingTable;
    vector<int> openAddressingTable;
    vector<bool> deleted;

    int hashFunction(int key) {
        return key % size;
    }

    void insertChaining(int key) {
        int index = hashFunction(key);
        for (int k : chainingTable[index]) {
            if (k == key) return; // Key already exists
        }
        chainingTable[index].push_back(key);
    }

    bool searchChaining(int key) {
        int index = hashFunction(key);
        for (int k : chainingTable[index]) {
            if (k == key) return true;
        }
        return false;
    }

    void deleteChaining(int key) {
        int index = hashFunction(key);
        chainingTable[index].remove(key);
    }

    void insertOpenAddressing(int key) {
        int index = hashFunction(key);
        int start_index = index;
        while (openAddressingTable[index] != -1 && openAddressingTable[index] != key && !deleted[index]) {
            index = (index + 1) % size;
            if (index == start_index) return; // Table is full
        }
        openAddressingTable[index] = key;
        deleted[index] = false;
    }

    bool searchOpenAddressing(int key) {
        int index = hashFunction(key);
        int start_index = index;
        while (openAddressingTable[index] != -1) {
            if (openAddressingTable[index] == key && !deleted[index]) return true;
            index = (index + 1) % size;
            if (index == start_index) break;
        }
        return false;
    }

    void deleteOpenAddressing(int key) {
        int index = hashFunction(key);
        int start_index = index;
        while (openAddressingTable[index] != -1) {
            if (openAddressingTable[index] == key && !deleted[index]) {
                deleted[index] = true;
                return;
            }
            index = (index + 1) % size;
            if (index == start_index) break;
        }
    }

public:
    HashTable(int m, string method) : size(m), method(method) {
        if (method == "CHAINING") {
            chainingTable.resize(size);
        } else if (method == "OPEN_ADDRESSING") {
            openAddressingTable.resize(size, -1);
            deleted.resize(size, false);
        }
    }

    void insert(int key) {
        if (method == "CHAINING") {
            insertChaining(key);
        } else if (method == "OPEN_ADDRESSING") {
            insertOpenAddressing(key);
        }
    }

    bool search(int key) {
        if (method == "CHAINING") {
            return searchChaining(key);
        } else if (method == "OPEN_ADDRESSING") {
            return searchOpenAddressing(key);
        }
        return false;
    }

    void remove(int key) {
        if (method == "CHAINING") {
            deleteChaining(key);
        } else if (method == "OPEN_ADDRESSING") {
            deleteOpenAddressing(key);
        }
    }
};

int main() {
    int m;
    cin >> m;
    string method;
    cin >> method;
    int q;
    cin >> q;

    HashTable hashTable(m, method);

    for (int i = 0; i < q; i++) {
        string operation;
        int key;
        cin >> operation >> key;

        if (operation == "INSERT") {
            hashTable.insert(key);
        } else if (operation == "SEARCH") {
            if (hashTable.search(key)) {
                cout << "FOUND" << endl;
            } else {
                cout << "NOT FOUND" << endl;
            }
        } else if (operation == "DELETE") {
            hashTable.remove(key);
        }
    }

    return 0;
}
